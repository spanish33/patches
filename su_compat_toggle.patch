--- kernel/sucompat.c.bak	2025-06-13 19:53:27.006279433 -0400
+++ kernel/sucompat.c	2025-06-13 20:24:40.329081685 -0400
@@ -25,6 +25,8 @@
 
 extern void ksu_escape_to_root();
 
+static bool ksu_sucompat_integrated __read_mostly = true;
+
 static const char sh_path[] = "/system/bin/sh";
 static const char ksud_path[] = KSUD_PATH;
 static const char su[] = SU_PATH;
@@ -51,6 +53,9 @@
 int ksu_handle_faccessat(int *dfd, const char __user **filename_user, int *mode,
 			 int *__unused_flags)
 {
+        if (!ksu_sucompat_integrated) {
+ 		return 0;
+ 	}
 	if (!ksu_is_allow_uid(current_uid().val)) {
 		return 0;
 	}
@@ -92,6 +97,9 @@
 
 int ksu_handle_stat(int *dfd, const char __user **filename_user, int *flags)
 {
+        if (!ksu_sucompat_integrated) {
+ 		return 0;
+ 	}
 	if (!ksu_is_allow_uid(current_uid().val)) {
 		return 0;
 	}
@@ -134,6 +142,10 @@
 {
 	struct filename *filename;
 
+        if (!ksu_sucompat_integrated) {
+ 		return 0;
+ 	}
+
 	if (unlikely(!filename_ptr))
 		return 0;
 
@@ -163,6 +175,10 @@
 	//const char su[] = SU_PATH;
 	char path[sizeof(su) + 1];
 
+        if (!ksu_sucompat_integrated){
+ 		return 0;
+ 	}
+
 	if (unlikely(!filename_user))
 		return 0;
 
@@ -185,6 +201,9 @@
 
 int ksu_handle_devpts(struct inode *inode)
 {
+        if (!ksu_sucompat_integrated){
+ 		return 0;
+ 	}
 	if (!current->mm) {
 		return 0;
 	}
@@ -292,6 +311,9 @@
 	su_kps[1] = init_kprobe(SYS_FACCESSAT_SYMBOL, faccessat_handler_pre);
 	su_kps[2] = init_kprobe(SYS_NEWFSTATAT_SYMBOL, newfstatat_handler_pre);
 	su_kps[3] = init_kprobe("pts_unix98_lookup", pts_unix98_lookup_pre);
+#else
+	ksu_sucompat_integrated = true;
+	pr_info("ksu_sucompat_init: hooks enabled: execve/execveat_su, faccessat, stat, devpts\n");
 #endif
 }
 
@@ -301,6 +323,9 @@
 	for (int i = 0; i < ARRAY_SIZE(su_kps); i++) {
 		destroy_kprobe(&su_kps[i]);
 	}
+#else
+	ksu_sucompat_integrated = false;
+	pr_info("ksu_sucompat_exit: hooks disabled: execve/execveat_su, faccessat, stat, devpts\n");
 #endif
 }
 
